# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Publish Python Package to PyPI

on:
  release:
    types: [published]
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,all]"
      
      - name: Run tests
        run: |
          pytest tests/ --cov=grainstat --cov-report=xml
      
      - name: Run linting
        run: |
          flake8 grainstat/ tests/
          black --check grainstat/ tests/
          mypy grainstat/

  release-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch full history for proper version detection
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine check-manifest
      
      - name: Check manifest
        run: check-manifest
      
      - name: Verify version consistency
        run: |
          # Get version from tag (handle both vX.X.X and X.X.X formats)
          if [[ ${GITHUB_REF} == refs/tags/v* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
          else
            TAG_VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "Tag version: $TAG_VERSION"
          
          # Get version from package
          PACKAGE_VERSION=$(python -c "import grainstat; print(grainstat.__version__)")
          echo "Package version: $PACKAGE_VERSION"
          
          # Compare versions
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Version mismatch: tag=$TAG_VERSION, package=$PACKAGE_VERSION"
            exit 1
          fi
        if: github.event_name == 'release'
      
      - name: Build release distributions
        run: |
          # Clean any existing builds
          rm -rf build/ dist/ *.egg-info/
          
          # Build source distribution and wheel
          python -m build
          
          # Verify the built packages
          python -m twine check dist/*
      
      - name: List built packages
        run: |
          echo "Built packages:"
          ls -la dist/
          
          echo "Package contents:"
          for file in dist/*; do
            echo "=== $file ==="
            if [[ $file == *.tar.gz ]]; then
              tar -tzf "$file" | head -20
            elif [[ $file == *.whl ]]; then
              python -m zipfile -l "$file" | head -20
            fi
            echo ""
          done
      
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 7

  pypi-publish:
    runs-on: ubuntu-latest
    needs: release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    
    # Use environment protection for production releases
    environment:
      name: ${{ (github.event_name == 'workflow_dispatch' && inputs.test_pypi) && 'test-pypi' || 'pypi' }}
      url: ${{ (github.event_name == 'workflow_dispatch' && inputs.test_pypi) && 'https://test.pypi.org/project/grainstat/' || 'https://pypi.org/project/grainstat/' }}
    
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: Verify distributions
        run: |
          echo "Distributions to publish:"
          ls -la dist/
          
          # Basic verification
          if [ -z "$(ls -A dist/)" ]; then
            echo "No distributions found!"
            exit 1
          fi
          
          # Count expected files (should have both .tar.gz and .whl)
          tar_count=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
          whl_count=$(ls dist/*.whl 2>/dev/null | wc -l)
          
          echo "Found $tar_count source distributions and $whl_count wheels"
          
          if [ "$tar_count" -eq 0 ] || [ "$whl_count" -eq 0 ]; then
            echo "Missing expected distribution files!"
            exit 1
          fi
      
      - name: Publish to Test PyPI
        if: github.event_name == 'workflow_dispatch' && inputs.test_pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          print-hash: true
          verbose: true
      
      - name: Publish to PyPI
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && !inputs.test_pypi)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          print-hash: true
          verbose: true

  post-release:
    runs-on: ubuntu-latest
    needs: pypi-publish
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Verify PyPI package
        run: |
          # Wait a bit for PyPI to update
          sleep 60
          
          # Extract version from tag
          if [[ ${GITHUB_REF} == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          echo "Attempting to install grainstat version $VERSION"
          
          # Try to install the package from PyPI with retries
          for i in {1..5}; do
            if pip install grainstat==$VERSION; then
              echo "Successfully installed on attempt $i"
              break
            else
              echo "Install attempt $i failed, waiting..."
              if [ $i -eq 5 ]; then
                echo "Failed to install after 5 attempts"
                exit 1
              fi
              sleep 30
            fi
          done
          
          # Basic smoke test
          python -c "
          import grainstat
          print(f'Successfully installed grainstat {grainstat.__version__}')
          
          # Quick functionality test
          from grainstat import GrainAnalyzer
          analyzer = GrainAnalyzer()
          print('GrainAnalyzer created successfully')
          "
      
      - name: Create success comment
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.payload.release.tag_name;
            const version = tag.startsWith('v') ? tag.slice(1) : tag;
            const body = `**Release ${tag} successfully published to PyPI**
            
            **Install the new version:**
            \`\`\`bash
            pip install grainstat==${version}
            # or upgrade existing installation
            pip install --upgrade grainstat
            \`\`\`
            
            **Links:**
            - [PyPI Package](https://pypi.org/project/grainstat/${version}/)
            - [Documentation](https://grainstat.readthedocs.io/en/latest/)
            - [Changelog](https://grainstat.readthedocs.io/en/latest/changelog.html)
            
            Thank you for using GrainStat! ðŸ”¬`;
            
            github.rest.issues.createComment({
              issue_number: context.payload.release.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
